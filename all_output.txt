Let's start by defining the structure of our project. We will have a backend directory for our Python code and a frontend directory for our HTML, CSS, and JavaScript code. 

Here is the structure of our project:

```
- backend
    - __init__.py
    - game.py
    - snake.py
    - controller.py
    - server.py
- frontend
    - index.html
    - style.css
    - script.js
- requirements.txt
```

Let's start with the backend part:

backend/__init__.py
```
# This is an empty file that tells Python that this directory should be considered a Python package.
```

backend/game.py
```
from .snake import Snake

class Game:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.snake = Snake()

    def update(self):
        self.snake.move()

    def is_game_over(self):
        return self.snake.is_out_of_bounds(self.width, self.height) or self.snake.is_colliding_with_self()
```

backend/snake.py
```
class Snake:
    def __init__(self):
        self.direction = 'right'
        self.body = [(0, 0)]

    def move(self):
        head = self.body[0]
        if self.direction == 'right':
            self.body.insert(0, (head[0] + 1, head[1]))
        elif self.direction == 'left':
            self.body.insert(0, (head[0] - 1, head[1]))
        elif self.direction == 'up':
            self.body.insert(0, (head[0], head[1] - 1))
        elif self.direction == 'down':
            self.body.insert(0, (head[0], head[1] + 1))
        self.body.pop()

    def is_out_of_bounds(self, width, height):
        head = self.body[0]
        return head[0] < 0 or head[1] < 0 or head[0] >= width or head[1] >= height

    def is_colliding_with_self(self):
        return self.body[0] in self.body[1:]
```

backend/controller.py
```
from .game import Game

class Controller:
    def __init__(self):
        self.game = Game(20, 20)
        self.is_paused = False

    def update(self):
        if not self.is_paused:
            self.game.update()

    def pause(self):
        self.is_paused = True

    def resume(self):
        self.is_paused = False

    def change_direction(self, direction):
        self.game.snake.direction = direction
```

backend/server.py
```
from flask import Flask, jsonify, request
from .controller import Controller

app = Flask(__name__)
controller = Controller()

@app.route('/game', methods=['GET'])
def get_game_state():
    return jsonify(controller.game.__dict__)

@app.route('/game', methods=['POST'])
def update_game_state():
    controller.update()
    return jsonify(controller.game.__dict__)

@app.route('/game/pause', methods=['POST'])
def pause_game():
    controller.pause()
    return jsonify(controller.game.__dict__)

@app.route('/game/resume', methods=['POST'])
def resume_game():
    controller.resume()
    return jsonify(controller.game.__dict__)

@app.route('/game/direction', methods=['POST'])
def change_direction():
    direction = request.json.get('direction')
    controller.change_direction(direction)
    return jsonify(controller.game.__dict__)
```

requirements.txt
```
flask==1.1.2
```

Now let's move on to the frontend part:

frontend/index.html
```
<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
    <div id="game"></div>
    <button id="pause">Pause</button>
    <button id="resume">Resume</button>
    <script src="script.js"></script>
</body>
</html>
```

frontend/style.css
```
#game {
    width: 400px;
    height: 400px;
    border: 1px solid black;
}

#game div {
    width: 20px;
    height: 20px;
    background-color: black;
    position: absolute;
}
```

frontend/script.js
```
let game = document.getElementById('game');
let pauseButton = document.getElementById('pause');
let resumeButton = document.getElementById('resume');

pauseButton.addEventListener('click', () => {
    fetch('/game/pause', { method: 'POST' });
});

resumeButton.addEventListener('click', () => {
    fetch('/game/resume', { method: 'POST' });
});

window.addEventListener('keydown', (event) => {
    let direction;
    if (event.key === 'ArrowUp') {
        direction = 'up';
    } else if (event.key === 'ArrowDown') {
        direction = 'down';
    } else if (event.key === 'ArrowLeft') {
        direction = 'left';
    } else if (event.key === 'ArrowRight') {
        direction = 'right';
    }
    if (direction) {
        fetch('/game/direction', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ direction }),
        });
    }
});

function updateGame() {
    fetch('/game')
        .then(response => response.json())
        .then(data => {
            game.innerHTML = '';
            for (let part of data.snake.body) {
                let div = document.createElement('div');
                div.style.left = `${part[0] * 20}px`;
                div.style.top = `${part[1] * 20}px`;
                game.appendChild(div);
            }
        });
}

setInterval(updateGame, 100);
```

This concludes a fully working implementation.